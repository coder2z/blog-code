<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>消息队列 on Coder2z Blog</title>
    <link>http://myxy99.cn/tags/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/</link>
    <description>Recent content in 消息队列 on Coder2z Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 14 Jul 2020 22:00:38 +0800</lastBuildDate><atom:link href="http://myxy99.cn/tags/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Golang遇上NSQ消息队列</title>
      <link>http://myxy99.cn/posts/golang%E9%81%87%E4%B8%8Ansq%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/</link>
      <pubDate>Tue, 14 Jul 2020 22:00:38 +0800</pubDate>
      
      <guid>http://myxy99.cn/posts/golang%E9%81%87%E4%B8%8Ansq%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/</guid>
      <description>简介 NSQ是一个基于Go语言的分布式实时消息平台, 它具有分布式、去中心化的拓扑结构，支持无限水平扩展。无单点故障、故障容错、高可用性以及能够保证消息的可靠传递的特征。另外，NSQ非常容易配置和部署, 且支持众多的消息协议。支持多种客户端，协议简单。
NSQ的几个组件  nsqd：一个负责接收、排队、转发消息到客户端的守护进程 nsqlookupd：管理拓扑信息, 用于收集nsqd上报的topic和channel,并提供最终一致性的发现服务的守护进程 nsqadmin：一套Web用户界面，可实时查看集群的统计数据和执行相应的管理任务  Docker安装 搭建主NSQ服务 获取到自己的服务器ip 我这里就是我服务器的外网ip 39.</description>
    </item>
    
    <item>
      <title>Golang实现RabbitMQ五种模式</title>
      <link>http://myxy99.cn/posts/golang%E5%AE%9E%E7%8E%B0rabbitmq%E4%BA%94%E7%A7%8D%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Fri, 03 Jul 2020 09:16:26 +0800</pubDate>
      
      <guid>http://myxy99.cn/posts/golang%E5%AE%9E%E7%8E%B0rabbitmq%E4%BA%94%E7%A7%8D%E6%A8%A1%E5%BC%8F/</guid>
      <description>使用的依赖包 github.com/streadway/amqp 创建RabbitMQ实例 package RabbitMQ import ( &amp;#34;fmt&amp;#34; &amp;#34;github.com/streadway/amqp&amp;#34; &amp;#34;log&amp;#34; ) // 用户名 密码 ip:端口/虚拟机 const MQURL = &amp;#34;amqp://admin:123456@127.</description>
    </item>
    
  </channel>
</rss>
